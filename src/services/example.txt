<https://api.magicthegathering.io/v1/cards?page=1>; rel="first", 
<https://api.magicthegathering.io/v1/cards?page=636>; rel="last", 
<https://api.magicthegathering.io/v1/cards?page=5>; rel="next", 
<https://api.magicthegathering.io/v1/cards?page=3>; rel="prev"

<https://api.magicthegathering.io/v1/cards?page=1>; rel="first", <https://api.magicthegathering.io/v1/cards?page=636>; rel="last", <https://api.magicthegathering.io/v1/cards?page=5>; rel="next", <https://api.magicthegathering.io/v1/cards?page=3>; rel="prev"


----------tipo do link-------------------------------------iterar no X
const short = headers.split(',')[X].split(';')[1].trim().substring(5);
const final = short.search('"');
console.log(short.substring(0,final))

const dividedH = headers.split(',')
dividedH.map((one) => {
	const singlearray = one.split(';')
	console.log(singlearray[1].trim())
})



------------link------------------------------iterar no X
const short = headers.split(',')[X].split(';')[0].trim();
console.log(short.substring(1,short.length-1))

const dividedH = headers.split(',')
dividedH.map((one) => {
	const singlearray = one.split(';')
	console.log(singlearray[0].trim())
})

------------mix------------------
const dividedH = headers.split(',')
//console.log(dividedH[0]+'\n');
dividedH.map((one) => {
    const singlearray = one.split(';')
    singlearray.map((line) => console.log(line.trim()))
})

---------------------------só é preciso iterar!!!!
const headers = ''
const arrayheader = headers.split(',')

const names = [ { link: '', page: '' } ]
const obj = {}           

arrayheader.forEach((n) => {
 [obj.link, obj.page] = n.split(';')
 names.push(obj)          
})

console.log(names)
--------------------------duplo split---------------
const [link, page] = header.split(',')

// const h_a = headSplit.map((array) => array.split(';'));

// const [{link, page}] = [...header.split(',')];
const [fire, water] = link.split(';');
console.log(fire);
console.log(water);